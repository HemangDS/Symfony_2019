<?php

namespace iFlair\LetsBonusAdminBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Shoppiday\CommonBundle\Traits\Repository;

/**
 * VoucherRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoucherRepository extends EntityRepository
{
    use Repository;

    public function getShopVouchersByVoucherProgram($voucherProgramId, &$em)
    {
        $voucherRepository = $em->getRepository('iFlairLetsBonusAdminBundle:Voucher');
        $vouchers = $voucherRepository->findBy(['program' => $voucherProgramId]);
        $vou = [];
        foreach ($vouchers as $voucher) {
            $vou[$voucher->getId()] = $voucher->getTitle();
        }
        $vou['status'] = 1;
        $vou['message'] = 'goelse';
        $vou['count'] = count($vouchers);

        return $vou;
    }

    public function getShopSelectedVouchers($shopId, $voucherProgramId, &$em)
    {
        $connection = $em->getConnection();
        $query = $connection->prepare(
            'SELECT lv.id, lv.title FROM lb_shop_voucher AS lsv, lb_voucher AS lv WHERE lsv.shop_id='.$shopId.' AND lsv.voucher_id=lv.id AND lv.program_id='.$voucherProgramId.''
        );
        $query->execute();
        $vouchers = $query->fetchAll();

        if (count($vouchers) > 0) {
            $vou = [];
            $vous = [];
            $i = 0;
            foreach ($vouchers as $voucher) {
                $vou['id'] = $voucher['id'];
                $vou['title'] = $voucher['title'];
                $vous['selected_vouchers'][$i] = $vou;
                ++$i;
            }
        } else {
            $vous['selected_vouchers'] = 0;
        }
        $vous['status'] = 1;
        $vous['message'] = 'goif';
        $vous['count'] = count($vouchers);

        return $vous;
    }

    public function getShopMergeVouchers($shopId, $voucherProgramId, $selectedVouchers, $em)
    {
        $connection = $em->getConnection();
        $queryVoucherList = $connection->prepare(
            'SELECT GROUP_CONCAT(DISTINCT lv.id SEPARATOR \',\') AS plain_id FROM lb_shop_voucher AS lsv, lb_voucher AS lv WHERE lsv.shop_id='.$shopId.' AND lsv.voucher_id=lv.id'
        );
        $queryVoucherList->execute();
        $selectedVouchersList = $queryVoucherList->fetchAll();

        if ($selectedVouchersList[0]['plain_id']) {
            $queryVoucherListTotal = $connection->prepare(
                'SELECT lv.id AS id, lv.title AS title FROM lb_voucher AS lv WHERE lv.id NOT IN ('.$selectedVouchersList[0]['plain_id'].') AND lv.program_id='.$voucherProgramId.''
            );
            $queryVoucherListTotal->execute();
            $nonSelectedVouchersList = $queryVoucherListTotal->fetchAll();
        } else {
            $queryVoucherListTotal = $connection->prepare(
                'SELECT lv.id AS id, lv.title AS title FROM lb_voucher AS lv WHERE lv.program_id='.$voucherProgramId.''
            );
            $queryVoucherListTotal->execute();
            $nonSelectedVouchersList = $queryVoucherListTotal->fetchAll();
        }

        $vou2 = [];
        $vous2 = [];
        $i2 = 0;
        if (!empty($nonSelectedVouchersList)) {
            foreach ($nonSelectedVouchersList as $voucher2) {
                $vou2['id'] = $voucher2['id'];
                $vou2['title'] = $voucher2['title'];
                $vous2['non_selected_vouchers'][$i2] = $vou2;
                ++$i2;
            }
        }

        if (!empty($nonSelectedVouchersList)) {
            $selectedVouchers['non_selected_vouchers'] = $vous2['non_selected_vouchers'];
        } else {
            $selectedVouchers['non_selected_vouchers'] = 0;
        }

        return $selectedVouchers;
    }

    /**
     * Method that return the number of rows actives on an entity
     * @return int|mixed
     */
    public function countActive()
    {
        try {
            $entity = $this->getEntityName();

            return $this->_em->createQuery('SELECT COUNT(a.id) FROM '.$entity.' a 
            WHERE a.publishStartDate<=:now AND a.publishEndDate>=:now AND a.status = 1')
                ->setParameter('now', date('Y-m-d'))
                ->setCacheable(true)
                ->setQueryCacheLifetime(600)
                ->getSingleScalarResult();
        } catch (\Exception $e) {
            return -1;
        }
    }
}
