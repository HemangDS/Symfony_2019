<?php

namespace iFlair\LetsBonusAdminBundle\Entity;

/**
 * SlugRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SlugRepository extends \Doctrine\ORM\EntityRepository
{
    public function addSlug(&$em, $shopHistory)
    {
        $id = $shopHistory->getId();
        $db_parameter_name = $shopHistory->getUrl();
        $post_parameter_name = $shopHistory->getUrl();
        $slug_response = $this->urlVerification($em, $id, $post_parameter_name, 'Slug', 'slugName', Constants::SHOP_IDENTIFIER, $db_parameter_name, $post_parameter_name);
        if ($slug_response) {
            $this->addRowObject($em, $id, $slug_response);
        }
    }

    public function updateSlug(&$em, $shopHistory, $formData)
    {
        $id = $shopHistory->getId();
        $db_parameter_name = $shopHistory->getUrl();
        $post_parameter_name = $formData['url'];
        $slug_response = $this->urlVerification($em, $id, $post_parameter_name, 'Slug', 'slugName', Constants::SHOP_IDENTIFIER, $db_parameter_name, $post_parameter_name);
        if ($slug_response) {
            $slug = $em->getRepository('iFlairLetsBonusAdminBundle:Slug')->findOneBy(array('categoryType' => Constants::SHOP_IDENTIFIER, 'categoryId' => $id));
            if ($slug) {
                $slug->setSlugName($slug_response);
                $em->persist($slug);
                $em->flush();
            } else {
                $this->addRowObject($em, $id, $slug_response);
            }
        }
    }

    public function removeSlug(&$em, $shopHistory)
    {
        $slug = $this->deleteRowObject($em, Constants::SHOP_IDENTIFIER, $shopHistory->getId(), 'Slug', 'categoryType', 'categoryId');
    }

    public function deleteRowObject(&$em, $cat_type, $category_id, $entity_name, $entity_cate_type, $entity_cate_id)
    {
        $slug_checking = $em->getRepository('iFlairLetsBonusAdminBundle:'.$entity_name)->
        findOneBy(array($entity_cate_type => $cat_type, $entity_cate_id => $category_id));

        if ($slug_checking) {
            $em->remove($slug_checking);
            $em->flush();
        }
    }

    public function addRowObject(&$em, $id, $slugName)
    {
        $slug = new Slug();
        $slug->setCategoryType(Constants::SHOP_IDENTIFIER);
        $slug->setSlugName($slugName);
        $slug->setCategoryId($id);
        $em->persist($slug);
        $em->flush();
    }

    public function urlVerification(&$em, $cat_id, $Category_name, $entity_name, $entity_field_name, $constant_identifier, $db_store_name, $post_store_name)
    {
        $connection = $em->getConnection();
        $i = 1;
        $Category_name = strtolower($Category_name);
        $Category_name = str_replace(' ', '-', $Category_name);

        if ($db_store_name == $post_store_name) {
            // when field name is not modified

            $slug_checking = $em->getRepository('iFlairLetsBonusAdminBundle:'.$entity_name)->findOneBy(array('categoryId' => $cat_id, 'categoryType' => $constant_identifier));

            if (!empty($slug_checking)) {
                // when field name is same as before and its slug is exist

                return $slug_checking->getSlugName();
            } else {
                // when field name is same as before but its slug is not exist

                $Category_name = $this->generateCategory($em, $entity_name, $entity_field_name, $Category_name);
            }
        } else {
            $Category_name = $this->generateCategory($em, $entity_name, $entity_field_name, $Category_name);
        }

        return $Category_name;
    }

    public function generateCategory($em, $entity_name, $entity_field_name, $Category_name)
    {
        $arr1 = array();
        $missing = array();
        $qb = $em->createQueryBuilder()
            ->select('u')
            ->from('iFlairLetsBonusAdminBundle:'.$entity_name, 'u')
            ->where('u.'.$entity_field_name.' LIKE :searchterm')
            ->setParameter('searchterm', $Category_name.'%');

        $slug_checking = $qb->getQuery()->getResult();
        $newCounter = '';
        if (!empty($slug_checking)) {
            $i=0;
            $lastUpdated = '';
            foreach ($slug_checking as $key => $value) {
                $lastCounterArrTmp = explode($Category_name, $value->getSlugName());
                if(count($lastCounterArrTmp)>1 && is_numeric($lastCounterArrTmp[1])) {
                    $arr1[] = $lastCounterArrTmp[1];
                }
                if(count($slug_checking)-1 == $i){
                    $lastUpdated = $value->getSlugName();
                }
                $i++;
            }
            if(count($arr1)>0) {
                //if slug counter range is missed in between somewhere then go to if and pick first missing counter.
                $usedSlugCountersRange = range(1, max($arr1));
                $missing = array_diff($usedSlugCountersRange, $arr1);
            }

            if(count($missing)>0){
                $newCounter = $missing[key($missing)];
            }else {
                $arrlength = count($arr1);
                if($arrlength>0){
                    sort($arr1);
                    for($x = 0; $x < $arrlength; $x++) {
                        $usedSlugCountersIndexing[] =  $arr1[$x];
                    }
                    $newCounter = $usedSlugCountersIndexing[$arrlength-1] + 1;
                }else {
                    if (!empty($lastUpdated)) {
                        $lastCounterArr = explode($Category_name, $value->getSlugName());
                        //for newer slug use this.
                        $lastCounter = $lastCounterArr[1];
                        //for older slug[in case of HYPHEN (-)] ,do compare and then take as per o/p.
                        if (substr($lastCounter, 0, 1) == '-') {
                            $toCompare = ltrim($lastCounter);
                            if ($toCompare > $lastCounter) {
                                $lastCounter = $toCompare;
                            }
                        }
                        $newCounter = $lastCounter + 1;
                    } else {
                        $newCounter = 1;
                    }
                }
            }
        }
        return $Category_name.$newCounter;
    }

    public function generateCategory1($em, $entity_name, $entity_field_name, $Category_name)
    {
        $data2 = array();
        $data1 = array();
        $qb = $em->createQueryBuilder()
                ->select('u')
                ->from('iFlairLetsBonusAdminBundle:'.$entity_name, 'u')
                ->where('u.'.$entity_field_name.' LIKE :searchterm')
                ->setParameter('searchterm', $Category_name.'%');

        $slug_checking = $qb->getQuery()->getResult();

        if (!empty($slug_checking)) {
            foreach ($slug_checking as $key => $value) {
                $slug_names[] = $value->getSlugName();
            }

            if (in_array($Category_name, $slug_names) == 1) {
                $slug_count = array();
                foreach ($slug_checking as $key => $value) {
                    $slug_count = explode($Category_name, $value->getSlugName());

                    if (!empty($slug_count[1])) {
                        $data[] = $slug_count[1];
                    }
                }

                if (!empty($data)) {
                    foreach ($data as $key => $value) {
                        if (strlen($value) == 2) {
                            $data1[] = explode('-', $value);
                        }
                    }

                    if (!empty($data1)) {
                        foreach ($data1 as $key => $value) {
                            foreach ($value as $key => $value1) {
                                if (is_numeric($value1)) {
                                    $data2[] = $value1;
                                }
                            }
                        }

                        $slug_max_count = explode('-', max($data2));
                        $i = max($slug_max_count) + 1;
                    } else {
                        $i = 1;
                    }
                } else {
                    $i = 1;
                }

                $Category_name = $Category_name.'-'.$i;
            }
        }

        return $Category_name;
    }
}
